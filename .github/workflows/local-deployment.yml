name: Local Pi Cluster Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'k3s/**/*.yaml'
      - 'k3s/**/*.yml'
  workflow_dispatch:
    inputs:
      deployment_method:
        description: 'Deployment method'
        required: true
        default: 'manual'
        type: choice
        options:
        - manual
        - webhook
        - polling

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate manifests
      run: |
        echo "🔍 Validating YAML syntax..."
        for file in $(find k3s -name "*.yaml" -o -name "*.yml"); do
          echo "Validating $file"
          kubectl --dry-run=client apply -f "$file" || {
            echo "❌ Validation failed for $file"
            exit 1
          }
        done
        echo "✅ All YAML files are valid"

    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        
        # Create a deployment package
        mkdir -p deployment-package
        cp -r k3s/* deployment-package/
        
        # Create deployment script
        cat > deployment-package/deploy-local.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Deploying to local Pi cluster..."
        
        # Apply configurations in order
        echo "📁 Applying namespaces..."
        kubectl apply -f namespaces/ || echo "⚠️ Some namespaces may already exist"
        
        echo "🔐 Applying secrets..."
        kubectl apply -f secrets/
        
        echo "📊 Applying monitoring stack..."
        kubectl apply -f applications/monitoring/prometheus/
        
        echo "🍽️ Applying Mealie..."
        kubectl apply -f applications/mealie/
        
        echo "🔒 Applying cert-manager configurations..."
        kubectl apply -f certmanager/
        
        echo "🌐 Applying MetalLB configuration..."
        kubectl apply -f metalLB/metallb-config.yaml
        
        echo "✅ Deployment completed!"
        
        # Show status
        echo "📊 Pod Status:"
        kubectl get pods -A | grep -E "(prometheus|mealie|grafana|postgres)"
        EOF
        
        chmod +x deployment-package/deploy-local.sh
        
        # Create a compressed package
        tar -czf deployment-package.tar.gz deployment-package/
        
        echo "📦 Deployment package created: deployment-package.tar.gz"

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 7

    - name: Generate deployment instructions
      run: |
        echo "📋 Local Deployment Instructions" >> $GITHUB_STEP_SUMMARY
        echo "================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 Download the deployment package from the Actions artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 To deploy to your local Pi cluster:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download \`deployment-package.tar.gz\` from the Actions artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Transfer to your Pi cluster master node" >> $GITHUB_STEP_SUMMARY
        echo "3. Extract and run: \`tar -xzf deployment-package.tar.gz && cd deployment-package && ./deploy-local.sh\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔄 Or use the automated methods below:" >> $GITHUB_STEP_SUMMARY
        echo "- Webhook deployment (if webhook server is running)" >> $GITHUB_STEP_SUMMARY
        echo "- Polling deployment (if polling script is running)" >> $GITHUB_STEP_SUMMARY
