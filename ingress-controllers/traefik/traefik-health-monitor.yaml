apiVersion: batch/v1
kind: CronJob
metadata:
  name: traefik-health-check
  namespace: kube-system
  labels:
    app: traefik-health-check
spec:
  schedule: "*/2 * * * *"  # Every 2 minutes
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: traefik-health-check
        spec:
          restartPolicy: OnFailure
          serviceAccountName: traefik-health-check
          containers:
          - name: traefik-health-check
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              set -e
              
              LOG_FILE="/tmp/traefik-health-check.log"
              
              log() {
                  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
              }
              
              test_traefik_dns() {
                  local test_domain="$1"
                  local timeout="${2:-10}"
                  
                  # Test DNS resolution from within the cluster
                  kubectl run traefik-dns-test-$(date +%s) --image=busybox --rm -i --restart=Never --timeout="${timeout}s" -- nslookup "$test_domain" > /dev/null 2>&1
                  return $?
              }
              
              test_traefik_connectivity() {
                  local test_url="$1"
                  local timeout="${2:-10}"
                  
                  # Test if Traefik can reach external services
                  kubectl run traefik-connectivity-test-$(date +%s) --image=curlimages/curl --rm -i --restart=Never --timeout="${timeout}s" -- curl -s --max-time 5 "$test_url" > /dev/null 2>&1
                  return $?
              }
              
              restart_traefik() {
                  log "WARNING: Traefik DNS/connectivity issues detected, restarting Traefik..."
                  kubectl rollout restart deployment traefik -n kube-system
                  
                  kubectl rollout status deployment traefik -n kube-system --timeout=120s
                  
                  if [ $? -eq 0 ]; then
                      log "SUCCESS: Traefik restarted successfully"
                      return 0
                  else
                      log "ERROR: Traefik restart failed"
                      return 1
                  fi
              }
              
              check_traefik_health() {
                  local unhealthy_pods=$(kubectl get pods -n kube-system -l app.kubernetes.io/name=traefik --field-selector=status.phase!=Running -o name | wc -l)
                  
                  if [ "$unhealthy_pods" -gt 0 ]; then
                      log "WARNING: $unhealthy_pods Traefik pods are not running"
                      return 1
                  fi
                  
                  local total_pods=$(kubectl get pods -n kube-system -l app.kubernetes.io/name=traefik --no-headers | wc -l)
                  if [ "$total_pods" -lt 2 ]; then
                      log "WARNING: Only $total_pods Traefik pods running (expected 2)"
                      return 1
                  fi
                  
                  return 0
              }
              
              main() {
                  log "Starting Traefik health check..."
                  
                  # Check Traefik pod health first
                  if ! check_traefik_health; then
                      log "Traefik pods unhealthy, attempting restart..."
                      restart_traefik
                      exit 0
                  fi
                  
                  # Test DNS resolution
                  local dns_test_domains=("kubernetes.default.svc.cluster.local" "google.com" "github.com")
                  local dns_failed_tests=0
                  
                  for domain in "${dns_test_domains[@]}"; do
                      if ! test_traefik_dns "$domain" 15; then
                          log "ERROR: DNS resolution failed for $domain"
                          ((dns_failed_tests++))
                      else
                          log "SUCCESS: DNS resolution OK for $domain"
                      fi
                  done
                  
                  # Test external connectivity
                  local connectivity_test_urls=("https://httpbin.org/status/200" "https://www.google.com")
                  local connectivity_failed_tests=0
                  
                  for url in "${connectivity_test_urls[@]}"; do
                      if ! test_traefik_connectivity "$url" 15; then
                          log "ERROR: External connectivity failed for $url"
                          ((connectivity_failed_tests++))
                      else
                          log "SUCCESS: External connectivity OK for $url"
                      fi
                  done
                  
                  # If more than half the tests failed, restart Traefik
                  local total_dns_tests=${#dns_test_domains[@]}
                  local total_connectivity_tests=${#connectivity_test_urls[@]}
                  local total_tests=$((total_dns_tests + total_connectivity_tests))
                  local total_failed=$((dns_failed_tests + connectivity_failed_tests))
                  
                  if [ "$total_failed" -gt $(($total_tests / 2)) ]; then
                      log "ERROR: $total_failed out of $total_tests tests failed (DNS: $dns_failed_tests, Connectivity: $connectivity_failed_tests)"
                      restart_traefik
                  else
                      log "Traefik health check passed ($total_failed/$total_tests tests failed)"
                  fi
              }
              
              main "$@"
            resources:
              requests:
                cpu: 50m
                memory: 64Mi
              limits:
                cpu: 100m
                memory: 128Mi
          serviceAccountName: traefik-health-check
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-health-check
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik-health-check
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik-health-check
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-health-check
subjects:
- kind: ServiceAccount
  name: traefik-health-check
  namespace: kube-system
